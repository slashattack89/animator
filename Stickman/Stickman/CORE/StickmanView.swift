//
// StickmanView.swift
// Generated by Core Animator version 0.8 on 12/2/14.
//
// DO NOT MODIFY THIS FILE. IT IS AUTO-GENERATED AND WILL BE OVERWRITTEN
//

import UIKit

@IBDesignable
class StickmanView : UIView {


	var animationCompletions = Dictionary<CAAnimation, (Bool) -> Void>()
	var viewsByName: [String : UIView]!

	// - MARK: Life Cycle

	override init() {
		super.init(frame: CGRect(x: 0, y: 0, width: 320, height: 480))
		self.setupHierarchy()
	}

	override init(frame: CGRect) {
		super.init(frame: frame)
		self.setupHierarchy()
	}

	required init(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
		self.setupHierarchy()
	}

	// - MARK: Scaling

	override func layoutSubviews() {
		super.layoutSubviews()

		if let scalingView = self.viewsByName["__scaling__"] {
			var xScale = self.bounds.size.width / scalingView.bounds.size.width
			var yScale = self.bounds.size.height / scalingView.bounds.size.height
			switch contentMode {
			case .ScaleToFill:
				break
			case .ScaleAspectFill:
				let scale = max(xScale, yScale)
				xScale = scale
				yScale = scale
			default:
				let scale = min(xScale, yScale)
				xScale = scale
				yScale = scale
			}
			scalingView.transform = CGAffineTransformMakeScale(xScale, yScale)
			scalingView.center = CGPoint(x:CGRectGetMidX(self.bounds), y:CGRectGetMidY(self.bounds))
		}
	}

	// - MARK: Setup

	func setupHierarchy() {
		var viewsByName: [String : UIView] = [:]
		let bundle = NSBundle(forClass:self.dynamicType)
		let __scaling__ = UIView()
		__scaling__.bounds = CGRect(x:0, y:0, width:320, height:480)
		__scaling__.center = CGPoint(x:160.0, y:240.0)
		self.addSubview(__scaling__)
		viewsByName["__scaling__"] = __scaling__

		let all = UIView()
		all.bounds = CGRect(x:0, y:0, width:106.0, height:455.1)
		all.layer.anchorPoint = CGPoint(x:0.446, y:-0.219)
		all.layer.position = CGPoint(x:159.961, y:-81.281)
		__scaling__.addSubview(all)
		viewsByName["all"] = all

		let stickman = UIView()
		stickman.bounds = CGRect(x:0, y:0, width:106.0, height:455.1)
		stickman.layer.anchorPoint = CGPoint(x:0.369, y:0.967)
		stickman.layer.position = CGPoint(x:39.132, y:440.154)
		all.addSubview(stickman)
		viewsByName["stickman"] = stickman

		let legBack = UIView()
		legBack.bounds = CGRect(x:0, y:0, width:37.5, height:181.5)
		legBack.layer.anchorPoint = CGPoint(x:0.508, y:0.082)
		legBack.layer.position = CGPoint(x:47.681, y:290.303)
		legBack.transform = CGAffineTransformMakeRotation(0.005)
		stickman.addSubview(legBack)
		viewsByName["leg back"] = legBack

		let thighBack = UIImageView()
		thighBack.bounds = CGRect(x:0, y:0, width:37.0, height:93.0)
		thighBack.layer.anchorPoint = CGPoint(x:0.500, y:0.185)
		var imgThighBack: UIImage!
		if let imagePath = bundle.pathForResource("thigh back.png", ofType:nil) {
			imgThighBack = UIImage(contentsOfFile:imagePath)
		}
		thighBack.image = imgThighBack
		thighBack.layer.position = CGPoint(x:19.132, y:14.007)
		thighBack.transform = CGAffineTransformMakeRotation(0.003)
		legBack.addSubview(thighBack)
		viewsByName["thigh back"] = thighBack

		let shinBack = UIImageView()
		shinBack.bounds = CGRect(x:0, y:0, width:37.0, height:123.0)
		shinBack.layer.anchorPoint = CGPoint(x:0.478, y:0.142)
		var imgShinBack: UIImage!
		if let imagePath = bundle.pathForResource("shin back.png", ofType:nil) {
			imgShinBack = UIImage(contentsOfFile:imagePath)
		}
		shinBack.image = imgShinBack
		shinBack.layer.position = CGPoint(x:18.173, y:73.137)
		legBack.addSubview(shinBack)
		viewsByName["shin back"] = shinBack

		let upperBody = UIView()
		upperBody.bounds = CGRect(x:0, y:0, width:106.0, height:307.5)
		upperBody.layer.anchorPoint = CGPoint(x:0.368, y:0.945)
		upperBody.layer.position = CGPoint(x:39.036, y:290.535)
		stickman.addSubview(upperBody)
		viewsByName["upper body"] = upperBody

		let armBack = UIView()
		armBack.bounds = CGRect(x:0, y:0, width:77.5, height:133.2)
		armBack.layer.anchorPoint = CGPoint(x:0.228, y:0.133)
		armBack.layer.position = CGPoint(x:46.177, y:114.417)
		upperBody.addSubview(armBack)
		viewsByName["arm back"] = armBack

		let bicepBack = UIImageView()
		bicepBack.bounds = CGRect(x:0, y:0, width:37.0, height:93.0)
		bicepBack.layer.anchorPoint = CGPoint(x:0.479, y:0.194)
		var imgBicepBack: UIImage!
		if let imagePath = bundle.pathForResource("bicep back.png", ofType:nil) {
			imgBicepBack = UIImage(contentsOfFile:imagePath)
		}
		bicepBack.image = imgBicepBack
		bicepBack.layer.position = CGPoint(x:17.706, y:18.046)
		armBack.addSubview(bicepBack)
		viewsByName["bicep back"] = bicepBack

		let forearmBack = UIImageView()
		forearmBack.bounds = CGRect(x:0, y:0, width:76.0, height:77.0)
		forearmBack.layer.anchorPoint = CGPoint(x:0.225, y:0.248)
		var imgForearmBack: UIImage!
		if let imagePath = bundle.pathForResource("forearm back.png", ofType:nil) {
			imgForearmBack = UIImage(contentsOfFile:imagePath)
		}
		forearmBack.image = imgForearmBack
		forearmBack.layer.position = CGPoint(x:18.434, y:75.242)
		armBack.addSubview(forearmBack)
		viewsByName["forearm back"] = forearmBack

		let torso = UIImageView()
		torso.bounds = CGRect(x:0, y:0, width:44.0, height:211.0)
		torso.layer.anchorPoint = CGPoint(x:0.478, y:0.508)
		var imgTorso: UIImage!
		if let imagePath = bundle.pathForResource("torso.png", ofType:nil) {
			imgTorso = UIImage(contentsOfFile:imagePath)
		}
		torso.image = imgTorso
		torso.layer.position = CGPoint(x:43.036, y:203.678)
		upperBody.addSubview(torso)
		viewsByName["torso"] = torso

		let armFront = UIView()
		armFront.bounds = CGRect(x:0, y:0, width:78.0, height:134.7)
		armFront.layer.anchorPoint = CGPoint(x:0.226, y:0.129)
		armFront.layer.position = CGPoint(x:38.875, y:113.245)
		upperBody.addSubview(armFront)
		viewsByName["arm front"] = armFront

		let forearmFront = UIImageView()
		forearmFront.bounds = CGRect(x:0, y:0, width:77.0, height:77.0)
		forearmFront.layer.anchorPoint = CGPoint(x:0.232, y:0.237)
		var imgForearmFront: UIImage!
		if let imagePath = bundle.pathForResource("forearm front.png", ofType:nil) {
			imgForearmFront = UIImage(contentsOfFile:imagePath)
		}
		forearmFront.image = imgForearmFront
		forearmFront.layer.position = CGPoint(x:18.625, y:75.856)
		armFront.addSubview(forearmFront)
		viewsByName["forearm front"] = forearmFront

		let bicepFront = UIImageView()
		bicepFront.bounds = CGRect(x:0, y:0, width:36.0, height:93.0)
		bicepFront.layer.anchorPoint = CGPoint(x:0.503, y:0.189)
		var imgBicepFront: UIImage!
		if let imagePath = bundle.pathForResource("bicep front.png", ofType:nil) {
			imgBicepFront = UIImage(contentsOfFile:imagePath)
		}
		bicepFront.image = imgBicepFront
		bicepFront.layer.position = CGPoint(x:18.125, y:17.606)
		armFront.addSubview(bicepFront)
		viewsByName["bicep front"] = bicepFront

		let head = UIImageView()
		head.bounds = CGRect(x:0, y:0, width:88.0, height:87.0)
		head.layer.anchorPoint = CGPoint(x:0.500, y:1.011)
		var imgHead: UIImage!
		if let imagePath = bundle.pathForResource("head.png", ofType:nil) {
			imgHead = UIImage(contentsOfFile:imagePath)
		}
		head.image = imgHead
		head.layer.position = CGPoint(x:44.000, y:87.961)
		upperBody.addSubview(head)
		viewsByName["head"] = head

		let legFront = UIView()
		legFront.bounds = CGRect(x:0, y:0, width:37.8, height:182.2)
		legFront.layer.anchorPoint = CGPoint(x:0.493, y:0.093)
		legFront.layer.position = CGPoint(x:38.892, y:289.417)
		legFront.transform = CGAffineTransformMakeRotation(0.003)
		stickman.addSubview(legFront)
		viewsByName["leg front"] = legFront

		let thighFront = UIImageView()
		thighFront.bounds = CGRect(x:0, y:0, width:37.0, height:93.0)
		thighFront.layer.anchorPoint = CGPoint(x:0.498, y:0.179)
		var imgThighFront: UIImage!
		if let imagePath = bundle.pathForResource("thigh front.png", ofType:nil) {
			imgThighFront = UIImage(contentsOfFile:imagePath)
		}
		thighFront.image = imgThighFront
		thighFront.layer.position = CGPoint(x:19.221, y:16.671)
		legFront.addSubview(thighFront)
		viewsByName["thigh front"] = thighFront

		let shinFront = UIImageView()
		shinFront.bounds = CGRect(x:0, y:0, width:37.0, height:123.0)
		shinFront.layer.anchorPoint = CGPoint(x:0.498, y:0.140)
		var imgShinFront: UIImage!
		if let imagePath = bundle.pathForResource("shin front.png", ofType:nil) {
			imgShinFront = UIImage(contentsOfFile:imagePath)
		}
		shinFront.image = imgShinFront
		shinFront.layer.position = CGPoint(x:18.935, y:76.385)
		shinFront.transform = CGAffineTransformMakeRotation(0.005)
		legFront.addSubview(shinFront)
		viewsByName["shin front"] = shinFront

		self.viewsByName = viewsByName
	}

	// - MARK: jump

	func addJumpAnimation() {
		addJumpAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, nil)
	}

	func addJumpAnimation(completion: ((Bool) -> Void)?) {
		addJumpAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion)
	}

	func addJumpAnimation(#removedOnCompletion: Bool) {
		addJumpAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, nil)
	}

	func addJumpAnimation(#removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addJumpAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion)
	}

	func addJumpAnimationWithBeginTime(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 1.750
			representativeAnimation.delegate = self
			self.layer.addAnimation(representativeAnimation, forKey: "Jump")
			self.animationCompletions[layer.animationForKey("Jump")] = complete
		}

		let legFrontRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		legFrontRotationAnimation.duration = 1.750
		legFrontRotationAnimation.values = [0.003 as Float, 0.043 as Float, 1.620 as Float, 0.464 as Float, 0.464 as Float, 0.046 as Float]
		legFrontRotationAnimation.keyTimes = [0.000 as Float, 0.143 as Float, 0.286 as Float, 0.357 as Float, 0.714 as Float, 1.000 as Float]
		legFrontRotationAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		legFrontRotationAnimation.beginTime = beginTime
		legFrontRotationAnimation.fillMode = fillMode
		legFrontRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["leg front"]?.layer.addAnimation(legFrontRotationAnimation, forKey:"jump_Rotation")

		let armFrontRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		armFrontRotationAnimation.duration = 1.750
		armFrontRotationAnimation.values = [0.000 as Float, 1.377 as Float, -2.098 as Float, 1.458 as Float, 1.458 as Float, 0.044 as Float]
		armFrontRotationAnimation.keyTimes = [0.000 as Float, 0.143 as Float, 0.286 as Float, 0.571 as Float, 0.714 as Float, 1.000 as Float]
		armFrontRotationAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		armFrontRotationAnimation.beginTime = beginTime
		armFrontRotationAnimation.fillMode = fillMode
		armFrontRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["arm front"]?.layer.addAnimation(armFrontRotationAnimation, forKey:"jump_Rotation")

		let armBackRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		armBackRotationAnimation.duration = 1.750
		armBackRotationAnimation.values = [0.000 as Float, 1.068 as Float, -1.976 as Float, 1.118 as Float, 1.118 as Float, 0.053 as Float]
		armBackRotationAnimation.keyTimes = [0.000 as Float, 0.186 as Float, 0.286 as Float, 0.571 as Float, 0.714 as Float, 1.000 as Float]
		armBackRotationAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		armBackRotationAnimation.beginTime = beginTime
		armBackRotationAnimation.fillMode = fillMode
		armBackRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["arm back"]?.layer.addAnimation(armBackRotationAnimation, forKey:"jump_Rotation")

		let stickmanRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		stickmanRotationAnimation.duration = 1.750
		stickmanRotationAnimation.values = [0.000 as Float, -1.067 as Float, -1.375 as Float, -1.392 as Float, -1.891 as Float, -1.819 as Float, -1.807 as Float, -0.004 as Float]
		stickmanRotationAnimation.keyTimes = [0.000 as Float, 0.143 as Float, 0.286 as Float, 0.343 as Float, 0.429 as Float, 0.571 as Float, 0.714 as Float, 1.000 as Float]
		stickmanRotationAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		stickmanRotationAnimation.beginTime = beginTime
		stickmanRotationAnimation.fillMode = fillMode
		stickmanRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["stickman"]?.layer.addAnimation(stickmanRotationAnimation, forKey:"jump_Rotation")

		let stickmanTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		stickmanTranslationXAnimation.duration = 1.750
		stickmanTranslationXAnimation.values = [0.000 as Float, 56.000 as Float, 95.000 as Float, 94.933 as Float, 147.879 as Float, 146.121 as Float, 154.620 as Float, 128.341 as Float, 117.675 as Float, 110.841 as Float, 61.675 as Float, 0.008 as Float]
		stickmanTranslationXAnimation.keyTimes = [0.000 as Float, 0.071 as Float, 0.143 as Float, 0.171 as Float, 0.286 as Float, 0.343 as Float, 0.429 as Float, 0.571 as Float, 0.714 as Float, 0.829 as Float, 0.914 as Float, 1.000 as Float]
		stickmanTranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		stickmanTranslationXAnimation.beginTime = beginTime
		stickmanTranslationXAnimation.fillMode = fillMode
		stickmanTranslationXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["stickman"]?.layer.addAnimation(stickmanTranslationXAnimation, forKey:"jump_TranslationX")

		let stickmanTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		stickmanTranslationYAnimation.duration = 1.750
		stickmanTranslationYAnimation.values = [0.000 as Float, -10.500 as Float, -48.000 as Float, -64.600 as Float, -213.114 as Float, -213.205 as Float, -240.296 as Float, -120.114 as Float, -122.781 as Float, -37.447 as Float, -7.047 as Float, -0.114 as Float]
		stickmanTranslationYAnimation.keyTimes = [0.000 as Float, 0.071 as Float, 0.143 as Float, 0.171 as Float, 0.286 as Float, 0.343 as Float, 0.429 as Float, 0.571 as Float, 0.714 as Float, 0.829 as Float, 0.914 as Float, 1.000 as Float]
		stickmanTranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		stickmanTranslationYAnimation.beginTime = beginTime
		stickmanTranslationYAnimation.fillMode = fillMode
		stickmanTranslationYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["stickman"]?.layer.addAnimation(stickmanTranslationYAnimation, forKey:"jump_TranslationY")

		let upperBodyRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		upperBodyRotationAnimation.duration = 1.750
		upperBodyRotationAnimation.values = [0.000 as Float, 1.572 as Float, 1.657 as Float, 1.430 as Float, 2.674 as Float, 2.848 as Float, 2.731 as Float, 0.056 as Float]
		upperBodyRotationAnimation.keyTimes = [0.000 as Float, 0.143 as Float, 0.200 as Float, 0.286 as Float, 0.571 as Float, 0.629 as Float, 0.714 as Float, 1.000 as Float]
		upperBodyRotationAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		upperBodyRotationAnimation.beginTime = beginTime
		upperBodyRotationAnimation.fillMode = fillMode
		upperBodyRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["upper body"]?.layer.addAnimation(upperBodyRotationAnimation, forKey:"jump_Rotation")

		let upperBodyOpacityAnimation = CAKeyframeAnimation(keyPath: "opacity")
		upperBodyOpacityAnimation.duration = 1.750
		upperBodyOpacityAnimation.values = [1.000 as Float, 1.000 as Float]
		upperBodyOpacityAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		upperBodyOpacityAnimation.timingFunctions = [linearTiming]
		upperBodyOpacityAnimation.beginTime = beginTime
		upperBodyOpacityAnimation.fillMode = fillMode
		upperBodyOpacityAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["upper body"]?.layer.addAnimation(upperBodyOpacityAnimation, forKey:"jump_Opacity")

		let upperBodyTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		upperBodyTranslationXAnimation.duration = 1.750
		upperBodyTranslationXAnimation.values = [0.000 as Float, 10.000 as Float, 10.000 as Float, 10.000 as Float, 0.000 as Float]
		upperBodyTranslationXAnimation.keyTimes = [0.000 as Float, 0.571 as Float, 0.629 as Float, 0.714 as Float, 1.000 as Float]
		upperBodyTranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming]
		upperBodyTranslationXAnimation.beginTime = beginTime
		upperBodyTranslationXAnimation.fillMode = fillMode
		upperBodyTranslationXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["upper body"]?.layer.addAnimation(upperBodyTranslationXAnimation, forKey:"jump_TranslationX")

		let upperBodyTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		upperBodyTranslationYAnimation.duration = 1.750
		upperBodyTranslationYAnimation.values = [0.000 as Float, 1.000 as Float, 3.000 as Float, 3.000 as Float, 0.000 as Float]
		upperBodyTranslationYAnimation.keyTimes = [0.000 as Float, 0.571 as Float, 0.629 as Float, 0.714 as Float, 1.000 as Float]
		upperBodyTranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming]
		upperBodyTranslationYAnimation.beginTime = beginTime
		upperBodyTranslationYAnimation.fillMode = fillMode
		upperBodyTranslationYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["upper body"]?.layer.addAnimation(upperBodyTranslationYAnimation, forKey:"jump_TranslationY")

		let legBackRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		legBackRotationAnimation.duration = 1.750
		legBackRotationAnimation.values = [0.005 as Float, 0.037 as Float, 1.623 as Float, 0.459 as Float, 0.459 as Float, 0.040 as Float]
		legBackRotationAnimation.keyTimes = [0.000 as Float, 0.143 as Float, 0.286 as Float, 0.457 as Float, 0.714 as Float, 1.000 as Float]
		legBackRotationAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		legBackRotationAnimation.beginTime = beginTime
		legBackRotationAnimation.fillMode = fillMode
		legBackRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["leg back"]?.layer.addAnimation(legBackRotationAnimation, forKey:"jump_Rotation")

		let legBackTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		legBackTranslationXAnimation.duration = 1.750
		legBackTranslationXAnimation.values = [0.000 as Float, 0.000 as Float, 0.000 as Float, 0.000 as Float]
		legBackTranslationXAnimation.keyTimes = [0.000 as Float, 0.286 as Float, 0.714 as Float, 1.000 as Float]
		legBackTranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		legBackTranslationXAnimation.beginTime = beginTime
		legBackTranslationXAnimation.fillMode = fillMode
		legBackTranslationXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["leg back"]?.layer.addAnimation(legBackTranslationXAnimation, forKey:"jump_TranslationX")

		let legBackTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		legBackTranslationYAnimation.duration = 1.750
		legBackTranslationYAnimation.values = [0.000 as Float, 8.000 as Float, 8.000 as Float, 8.000 as Float]
		legBackTranslationYAnimation.keyTimes = [0.000 as Float, 0.286 as Float, 0.714 as Float, 1.000 as Float]
		legBackTranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		legBackTranslationYAnimation.beginTime = beginTime
		legBackTranslationYAnimation.fillMode = fillMode
		legBackTranslationYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["leg back"]?.layer.addAnimation(legBackTranslationYAnimation, forKey:"jump_TranslationY")

		let forearmFrontRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		forearmFrontRotationAnimation.duration = 1.750
		forearmFrontRotationAnimation.values = [0.000 as Float, -0.404 as Float, 0.151 as Float, -0.441 as Float, -0.441 as Float, 0.031 as Float]
		forearmFrontRotationAnimation.keyTimes = [0.000 as Float, 0.143 as Float, 0.286 as Float, 0.571 as Float, 0.714 as Float, 1.000 as Float]
		forearmFrontRotationAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		forearmFrontRotationAnimation.beginTime = beginTime
		forearmFrontRotationAnimation.fillMode = fillMode
		forearmFrontRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["forearm front"]?.layer.addAnimation(forearmFrontRotationAnimation, forKey:"jump_Rotation")

		let shinBackRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		shinBackRotationAnimation.duration = 1.750
		shinBackRotationAnimation.values = [0.000 as Float, 1.291 as Float, 0.053 as Float, 1.594 as Float, 1.284 as Float, 1.284 as Float, 0.045 as Float]
		shinBackRotationAnimation.keyTimes = [0.000 as Float, 0.143 as Float, 0.286 as Float, 0.457 as Float, 0.571 as Float, 0.714 as Float, 1.000 as Float]
		shinBackRotationAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		shinBackRotationAnimation.beginTime = beginTime
		shinBackRotationAnimation.fillMode = fillMode
		shinBackRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["shin back"]?.layer.addAnimation(shinBackRotationAnimation, forKey:"jump_Rotation")

		let shinFrontRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		shinFrontRotationAnimation.duration = 1.750
		shinFrontRotationAnimation.values = [0.005 as Float, 1.364 as Float, 0.095 as Float, 1.614 as Float, 1.378 as Float, 1.378 as Float, 0.052 as Float]
		shinFrontRotationAnimation.keyTimes = [0.000 as Float, 0.143 as Float, 0.286 as Float, 0.357 as Float, 0.571 as Float, 0.714 as Float, 1.000 as Float]
		shinFrontRotationAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		shinFrontRotationAnimation.beginTime = beginTime
		shinFrontRotationAnimation.fillMode = fillMode
		shinFrontRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["shin front"]?.layer.addAnimation(shinFrontRotationAnimation, forKey:"jump_Rotation")

		let forearmBackRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		forearmBackRotationAnimation.duration = 1.750
		forearmBackRotationAnimation.values = [0.000 as Float, -0.316 as Float, 0.104 as Float, -0.159 as Float, -0.159 as Float, 0.033 as Float]
		forearmBackRotationAnimation.keyTimes = [0.000 as Float, 0.186 as Float, 0.286 as Float, 0.571 as Float, 0.714 as Float, 1.000 as Float]
		forearmBackRotationAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		forearmBackRotationAnimation.beginTime = beginTime
		forearmBackRotationAnimation.fillMode = fillMode
		forearmBackRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["forearm back"]?.layer.addAnimation(forearmBackRotationAnimation, forKey:"jump_Rotation")
	}

	func removeJumpAnimation() {
		self.layer.removeAnimationForKey("Jump")
		self.viewsByName["leg front"]?.layer.removeAnimationForKey("jump_Rotation")
		self.viewsByName["arm front"]?.layer.removeAnimationForKey("jump_Rotation")
		self.viewsByName["arm back"]?.layer.removeAnimationForKey("jump_Rotation")
		self.viewsByName["stickman"]?.layer.removeAnimationForKey("jump_Rotation")
		self.viewsByName["stickman"]?.layer.removeAnimationForKey("jump_TranslationX")
		self.viewsByName["stickman"]?.layer.removeAnimationForKey("jump_TranslationY")
		self.viewsByName["upper body"]?.layer.removeAnimationForKey("jump_Rotation")
		self.viewsByName["upper body"]?.layer.removeAnimationForKey("jump_Opacity")
		self.viewsByName["upper body"]?.layer.removeAnimationForKey("jump_TranslationX")
		self.viewsByName["upper body"]?.layer.removeAnimationForKey("jump_TranslationY")
		self.viewsByName["leg back"]?.layer.removeAnimationForKey("jump_Rotation")
		self.viewsByName["leg back"]?.layer.removeAnimationForKey("jump_TranslationX")
		self.viewsByName["leg back"]?.layer.removeAnimationForKey("jump_TranslationY")
		self.viewsByName["forearm front"]?.layer.removeAnimationForKey("jump_Rotation")
		self.viewsByName["shin back"]?.layer.removeAnimationForKey("jump_Rotation")
		self.viewsByName["shin front"]?.layer.removeAnimationForKey("jump_Rotation")
		self.viewsByName["forearm back"]?.layer.removeAnimationForKey("jump_Rotation")
	}

	// - MARK: swing

	func addSwingAnimation() {
		addSwingAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false)
	}

	func addSwingAnimation(#removedOnCompletion: Bool) {
		addSwingAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion)
	}

	func addSwingAnimationWithBeginTime(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		let easeInOutTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseInEaseOut)
		let easeOutTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionEaseOut)
		let overshootTiming = CAMediaTimingFunction(controlPoints: 0.00, 0.00, 0.00, 0.00)

		let legFrontRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		legFrontRotationAnimation.duration = 1.500
		legFrontRotationAnimation.values = [-1.881 as Float, -1.881 as Float]
		legFrontRotationAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		legFrontRotationAnimation.timingFunctions = [linearTiming]
		legFrontRotationAnimation.beginTime = beginTime
		legFrontRotationAnimation.fillMode = fillMode
		legFrontRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["leg front"]?.layer.addAnimation(legFrontRotationAnimation, forKey:"swing_Rotation")

		let armFrontRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		armFrontRotationAnimation.duration = 1.500
		armFrontRotationAnimation.values = [0.923 as Float, -0.768 as Float]
		armFrontRotationAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		armFrontRotationAnimation.timingFunctions = [easeInOutTiming]
		armFrontRotationAnimation.autoreverses = true
		armFrontRotationAnimation.repeatCount = HUGE
		armFrontRotationAnimation.beginTime = beginTime
		armFrontRotationAnimation.fillMode = fillMode
		armFrontRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["arm front"]?.layer.addAnimation(armFrontRotationAnimation, forKey:"swing_Rotation")

		let armBackRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		armBackRotationAnimation.duration = 1.500
		armBackRotationAnimation.values = [-0.236 as Float, -1.219 as Float]
		armBackRotationAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		armBackRotationAnimation.timingFunctions = [easeInOutTiming]
		armBackRotationAnimation.autoreverses = true
		armBackRotationAnimation.repeatCount = HUGE
		armBackRotationAnimation.beginTime = beginTime
		armBackRotationAnimation.fillMode = fillMode
		armBackRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["arm back"]?.layer.addAnimation(armBackRotationAnimation, forKey:"swing_Rotation")

		let allRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		allRotationAnimation.duration = 1.500
		allRotationAnimation.values = [1.188 as Float, -1.081 as Float]
		allRotationAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		allRotationAnimation.timingFunctions = [easeInOutTiming]
		allRotationAnimation.autoreverses = true
		allRotationAnimation.repeatCount = HUGE
		allRotationAnimation.beginTime = beginTime
		allRotationAnimation.fillMode = fillMode
		allRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["all"]?.layer.addAnimation(allRotationAnimation, forKey:"swing_Rotation")

		let legBackRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		legBackRotationAnimation.duration = 1.500
		legBackRotationAnimation.values = [-1.899 as Float, -1.899 as Float]
		legBackRotationAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		legBackRotationAnimation.timingFunctions = [linearTiming]
		legBackRotationAnimation.beginTime = beginTime
		legBackRotationAnimation.fillMode = fillMode
		legBackRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["leg back"]?.layer.addAnimation(legBackRotationAnimation, forKey:"swing_Rotation")

		let shinBackRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		shinBackRotationAnimation.duration = 1.500
		shinBackRotationAnimation.values = [2.004 as Float, 0.303 as Float]
		shinBackRotationAnimation.keyTimes = [0.000 as Float, 1.000 as Float]
		shinBackRotationAnimation.timingFunctions = [overshootTiming]
		shinBackRotationAnimation.autoreverses = true
		shinBackRotationAnimation.repeatCount = HUGE
		shinBackRotationAnimation.beginTime = beginTime
		shinBackRotationAnimation.fillMode = fillMode
		shinBackRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["shin back"]?.layer.addAnimation(shinBackRotationAnimation, forKey:"swing_Rotation")

		let shinFrontRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		shinFrontRotationAnimation.duration = 1.500
		shinFrontRotationAnimation.values = [1.983 as Float, 0.663 as Float, 0.098 as Float]
		shinFrontRotationAnimation.keyTimes = [0.000 as Float, 0.700 as Float, 1.000 as Float]
		shinFrontRotationAnimation.timingFunctions = [linearTiming, easeOutTiming]
		shinFrontRotationAnimation.autoreverses = true
		shinFrontRotationAnimation.repeatCount = HUGE
		shinFrontRotationAnimation.beginTime = beginTime
		shinFrontRotationAnimation.fillMode = fillMode
		shinFrontRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["shin front"]?.layer.addAnimation(shinFrontRotationAnimation, forKey:"swing_Rotation")
	}

	func removeSwingAnimation() {
		self.viewsByName["leg front"]?.layer.removeAnimationForKey("swing_Rotation")
		self.viewsByName["arm front"]?.layer.removeAnimationForKey("swing_Rotation")
		self.viewsByName["arm back"]?.layer.removeAnimationForKey("swing_Rotation")
		self.viewsByName["all"]?.layer.removeAnimationForKey("swing_Rotation")
		self.viewsByName["leg back"]?.layer.removeAnimationForKey("swing_Rotation")
		self.viewsByName["shin back"]?.layer.removeAnimationForKey("swing_Rotation")
		self.viewsByName["shin front"]?.layer.removeAnimationForKey("swing_Rotation")
	}

	// - MARK: walk

	func addWalkAnimation() {
		addWalkAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false)
	}

	func addWalkAnimation(#removedOnCompletion: Bool) {
		addWalkAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion)
	}

	func addWalkAnimationWithBeginTime(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)

		let legFrontRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		legFrontRotationAnimation.duration = 1.000
		legFrontRotationAnimation.values = [-0.819 as Float, 0.926 as Float, -1.037 as Float, -0.819 as Float]
		legFrontRotationAnimation.keyTimes = [0.000 as Float, 0.500 as Float, 0.875 as Float, 1.000 as Float]
		legFrontRotationAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		legFrontRotationAnimation.repeatCount = HUGE
		legFrontRotationAnimation.beginTime = beginTime
		legFrontRotationAnimation.fillMode = fillMode
		legFrontRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["leg front"]?.layer.addAnimation(legFrontRotationAnimation, forKey:"walk_Rotation")

		let armFrontRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		armFrontRotationAnimation.duration = 1.000
		armFrontRotationAnimation.values = [1.617 as Float, -1.083 as Float, 1.617 as Float]
		armFrontRotationAnimation.keyTimes = [0.000 as Float, 0.500 as Float, 1.000 as Float]
		armFrontRotationAnimation.timingFunctions = [linearTiming, linearTiming]
		armFrontRotationAnimation.repeatCount = HUGE
		armFrontRotationAnimation.beginTime = beginTime
		armFrontRotationAnimation.fillMode = fillMode
		armFrontRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["arm front"]?.layer.addAnimation(armFrontRotationAnimation, forKey:"walk_Rotation")

		let armBackRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		armBackRotationAnimation.duration = 1.000
		armBackRotationAnimation.values = [-0.741 as Float, 1.365 as Float, -0.741 as Float]
		armBackRotationAnimation.keyTimes = [0.000 as Float, 0.500 as Float, 1.000 as Float]
		armBackRotationAnimation.timingFunctions = [linearTiming, linearTiming]
		armBackRotationAnimation.repeatCount = HUGE
		armBackRotationAnimation.beginTime = beginTime
		armBackRotationAnimation.fillMode = fillMode
		armBackRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["arm back"]?.layer.addAnimation(armBackRotationAnimation, forKey:"walk_Rotation")

		let upperBodyRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		upperBodyRotationAnimation.duration = 1.000
		upperBodyRotationAnimation.values = [0.142 as Float, 0.055 as Float, 0.142 as Float, 0.055 as Float, 0.142 as Float]
		upperBodyRotationAnimation.keyTimes = [0.000 as Float, 0.250 as Float, 0.500 as Float, 0.750 as Float, 1.000 as Float]
		upperBodyRotationAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming]
		upperBodyRotationAnimation.repeatCount = HUGE
		upperBodyRotationAnimation.beginTime = beginTime
		upperBodyRotationAnimation.fillMode = fillMode
		upperBodyRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["upper body"]?.layer.addAnimation(upperBodyRotationAnimation, forKey:"walk_Rotation")

		let legBackRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		legBackRotationAnimation.duration = 1.000
		legBackRotationAnimation.values = [0.919 as Float, -0.954 as Float, -0.833 as Float, 0.919 as Float]
		legBackRotationAnimation.keyTimes = [0.000 as Float, 0.375 as Float, 0.500 as Float, 1.000 as Float]
		legBackRotationAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		legBackRotationAnimation.repeatCount = HUGE
		legBackRotationAnimation.beginTime = beginTime
		legBackRotationAnimation.fillMode = fillMode
		legBackRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["leg back"]?.layer.addAnimation(legBackRotationAnimation, forKey:"walk_Rotation")

		let forearmFrontRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		forearmFrontRotationAnimation.duration = 1.000
		forearmFrontRotationAnimation.values = [0.000 as Float, -0.464 as Float, -0.293 as Float, 0.472 as Float, 0.050 as Float]
		forearmFrontRotationAnimation.keyTimes = [0.000 as Float, 0.250 as Float, 0.500 as Float, 0.750 as Float, 1.000 as Float]
		forearmFrontRotationAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming]
		forearmFrontRotationAnimation.repeatCount = HUGE
		forearmFrontRotationAnimation.beginTime = beginTime
		forearmFrontRotationAnimation.fillMode = fillMode
		forearmFrontRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["forearm front"]?.layer.addAnimation(forearmFrontRotationAnimation, forKey:"walk_Rotation")

		let shinBackRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		shinBackRotationAnimation.duration = 1.000
		shinBackRotationAnimation.values = [0.000 as Float, 1.635 as Float, 0.054 as Float, 0.319 as Float, 0.055 as Float, 0.050 as Float]
		shinBackRotationAnimation.keyTimes = [0.000 as Float, 0.250 as Float, 0.500 as Float, 0.625 as Float, 0.750 as Float, 1.000 as Float]
		shinBackRotationAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		shinBackRotationAnimation.repeatCount = HUGE
		shinBackRotationAnimation.beginTime = beginTime
		shinBackRotationAnimation.fillMode = fillMode
		shinBackRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["shin back"]?.layer.addAnimation(shinBackRotationAnimation, forKey:"walk_Rotation")

		let shinFrontRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		shinFrontRotationAnimation.duration = 1.000
		shinFrontRotationAnimation.values = [0.005 as Float, 0.391 as Float, 0.046 as Float, 1.099 as Float, 0.050 as Float]
		shinFrontRotationAnimation.keyTimes = [0.000 as Float, 0.125 as Float, 0.250 as Float, 0.750 as Float, 1.000 as Float]
		shinFrontRotationAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming]
		shinFrontRotationAnimation.repeatCount = HUGE
		shinFrontRotationAnimation.beginTime = beginTime
		shinFrontRotationAnimation.fillMode = fillMode
		shinFrontRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["shin front"]?.layer.addAnimation(shinFrontRotationAnimation, forKey:"walk_Rotation")

		let forearmBackRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		forearmBackRotationAnimation.duration = 1.000
		forearmBackRotationAnimation.values = [0.000 as Float, 0.399 as Float, 0.056 as Float, -0.471 as Float, 0.050 as Float]
		forearmBackRotationAnimation.keyTimes = [0.000 as Float, 0.250 as Float, 0.500 as Float, 0.750 as Float, 1.000 as Float]
		forearmBackRotationAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming]
		forearmBackRotationAnimation.repeatCount = HUGE
		forearmBackRotationAnimation.beginTime = beginTime
		forearmBackRotationAnimation.fillMode = fillMode
		forearmBackRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["forearm back"]?.layer.addAnimation(forearmBackRotationAnimation, forKey:"walk_Rotation")
	}

	func removeWalkAnimation() {
		self.viewsByName["leg front"]?.layer.removeAnimationForKey("walk_Rotation")
		self.viewsByName["arm front"]?.layer.removeAnimationForKey("walk_Rotation")
		self.viewsByName["arm back"]?.layer.removeAnimationForKey("walk_Rotation")
		self.viewsByName["upper body"]?.layer.removeAnimationForKey("walk_Rotation")
		self.viewsByName["leg back"]?.layer.removeAnimationForKey("walk_Rotation")
		self.viewsByName["forearm front"]?.layer.removeAnimationForKey("walk_Rotation")
		self.viewsByName["shin back"]?.layer.removeAnimationForKey("walk_Rotation")
		self.viewsByName["shin front"]?.layer.removeAnimationForKey("walk_Rotation")
		self.viewsByName["forearm back"]?.layer.removeAnimationForKey("walk_Rotation")
	}

	// - MARK: walk bouncy

	func addWalkBouncyAnimation() {
		addWalkBouncyAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false)
	}

	func addWalkBouncyAnimation(#removedOnCompletion: Bool) {
		addWalkBouncyAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion)
	}

	func addWalkBouncyAnimationWithBeginTime(beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)

		let legFrontRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		legFrontRotationAnimation.duration = 1.000
		legFrontRotationAnimation.values = [-0.819 as Float, 0.926 as Float, -1.037 as Float, -0.819 as Float]
		legFrontRotationAnimation.keyTimes = [0.000 as Float, 0.500 as Float, 0.875 as Float, 1.000 as Float]
		legFrontRotationAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		legFrontRotationAnimation.repeatCount = HUGE
		legFrontRotationAnimation.beginTime = beginTime
		legFrontRotationAnimation.fillMode = fillMode
		legFrontRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["leg front"]?.layer.addAnimation(legFrontRotationAnimation, forKey:"walk bouncy_Rotation")

		let armFrontRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		armFrontRotationAnimation.duration = 1.000
		armFrontRotationAnimation.values = [1.617 as Float, -1.083 as Float, 1.617 as Float]
		armFrontRotationAnimation.keyTimes = [0.000 as Float, 0.500 as Float, 1.000 as Float]
		armFrontRotationAnimation.timingFunctions = [linearTiming, linearTiming]
		armFrontRotationAnimation.repeatCount = HUGE
		armFrontRotationAnimation.beginTime = beginTime
		armFrontRotationAnimation.fillMode = fillMode
		armFrontRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["arm front"]?.layer.addAnimation(armFrontRotationAnimation, forKey:"walk bouncy_Rotation")

		let armBackRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		armBackRotationAnimation.duration = 1.000
		armBackRotationAnimation.values = [-0.741 as Float, 1.365 as Float, -0.741 as Float]
		armBackRotationAnimation.keyTimes = [0.000 as Float, 0.500 as Float, 1.000 as Float]
		armBackRotationAnimation.timingFunctions = [linearTiming, linearTiming]
		armBackRotationAnimation.repeatCount = HUGE
		armBackRotationAnimation.beginTime = beginTime
		armBackRotationAnimation.fillMode = fillMode
		armBackRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["arm back"]?.layer.addAnimation(armBackRotationAnimation, forKey:"walk bouncy_Rotation")

		let stickmanScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		stickmanScaleXAnimation.duration = 1.000
		stickmanScaleXAnimation.values = [1.000 as Float, 1.000 as Float, 1.000 as Float, 1.000 as Float, 1.000 as Float, 1.000 as Float, 1.000 as Float, 1.000 as Float, 1.000 as Float, 1.000 as Float]
		stickmanScaleXAnimation.keyTimes = [0.000 as Float, 0.050 as Float, 0.125 as Float, 0.225 as Float, 0.375 as Float, 0.550 as Float, 0.650 as Float, 0.750 as Float, 0.825 as Float, 1.000 as Float]
		stickmanScaleXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		stickmanScaleXAnimation.repeatCount = HUGE
		stickmanScaleXAnimation.beginTime = beginTime
		stickmanScaleXAnimation.fillMode = fillMode
		stickmanScaleXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["stickman"]?.layer.addAnimation(stickmanScaleXAnimation, forKey:"walk bouncy_ScaleX")

		let stickmanScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		stickmanScaleYAnimation.duration = 1.000
		stickmanScaleYAnimation.values = [1.000 as Float, 0.977 as Float, 0.975 as Float, 1.028 as Float, 0.996 as Float, 1.010 as Float, 0.983 as Float, 1.023 as Float, 0.996 as Float, 1.000 as Float]
		stickmanScaleYAnimation.keyTimes = [0.000 as Float, 0.050 as Float, 0.125 as Float, 0.225 as Float, 0.375 as Float, 0.550 as Float, 0.650 as Float, 0.750 as Float, 0.825 as Float, 1.000 as Float]
		stickmanScaleYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		stickmanScaleYAnimation.repeatCount = HUGE
		stickmanScaleYAnimation.beginTime = beginTime
		stickmanScaleYAnimation.fillMode = fillMode
		stickmanScaleYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["stickman"]?.layer.addAnimation(stickmanScaleYAnimation, forKey:"walk bouncy_ScaleY")

		let stickmanTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		stickmanTranslationXAnimation.duration = 1.000
		stickmanTranslationXAnimation.values = [0.000 as Float, 0.000 as Float, 0.000 as Float, 0.000 as Float, 0.000 as Float, 0.000 as Float, 0.000 as Float, 0.000 as Float, 0.000 as Float, 0.000 as Float]
		stickmanTranslationXAnimation.keyTimes = [0.000 as Float, 0.050 as Float, 0.125 as Float, 0.225 as Float, 0.375 as Float, 0.550 as Float, 0.650 as Float, 0.750 as Float, 0.825 as Float, 1.000 as Float]
		stickmanTranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		stickmanTranslationXAnimation.repeatCount = HUGE
		stickmanTranslationXAnimation.beginTime = beginTime
		stickmanTranslationXAnimation.fillMode = fillMode
		stickmanTranslationXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["stickman"]?.layer.addAnimation(stickmanTranslationXAnimation, forKey:"walk bouncy_TranslationX")

		let stickmanTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		stickmanTranslationYAnimation.duration = 1.000
		stickmanTranslationYAnimation.values = [0.000 as Float, 0.349 as Float, 0.374 as Float, 0.180 as Float, 0.169 as Float, -0.070 as Float, 0.316 as Float, -0.301 as Float, -0.211 as Float, 0.000 as Float]
		stickmanTranslationYAnimation.keyTimes = [0.000 as Float, 0.050 as Float, 0.125 as Float, 0.225 as Float, 0.375 as Float, 0.550 as Float, 0.650 as Float, 0.750 as Float, 0.825 as Float, 1.000 as Float]
		stickmanTranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		stickmanTranslationYAnimation.repeatCount = HUGE
		stickmanTranslationYAnimation.beginTime = beginTime
		stickmanTranslationYAnimation.fillMode = fillMode
		stickmanTranslationYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["stickman"]?.layer.addAnimation(stickmanTranslationYAnimation, forKey:"walk bouncy_TranslationY")

		let upperBodyRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		upperBodyRotationAnimation.duration = 1.000
		upperBodyRotationAnimation.values = [0.142 as Float, 0.055 as Float, 0.142 as Float, 0.055 as Float, 0.142 as Float]
		upperBodyRotationAnimation.keyTimes = [0.000 as Float, 0.250 as Float, 0.500 as Float, 0.750 as Float, 1.000 as Float]
		upperBodyRotationAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming]
		upperBodyRotationAnimation.repeatCount = HUGE
		upperBodyRotationAnimation.beginTime = beginTime
		upperBodyRotationAnimation.fillMode = fillMode
		upperBodyRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["upper body"]?.layer.addAnimation(upperBodyRotationAnimation, forKey:"walk bouncy_Rotation")

		let allTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		allTranslationXAnimation.duration = 1.000
		allTranslationXAnimation.values = [0.000 as Float, 0.000 as Float, 0.000 as Float, 0.000 as Float, 0.000 as Float]
		allTranslationXAnimation.keyTimes = [0.000 as Float, 0.250 as Float, 0.500 as Float, 0.750 as Float, 1.000 as Float]
		allTranslationXAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming]
		allTranslationXAnimation.repeatCount = HUGE
		allTranslationXAnimation.beginTime = beginTime
		allTranslationXAnimation.fillMode = fillMode
		allTranslationXAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["all"]?.layer.addAnimation(allTranslationXAnimation, forKey:"walk bouncy_TranslationX")

		let allTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		allTranslationYAnimation.duration = 1.000
		allTranslationYAnimation.values = [59.667 as Float, 7.417 as Float, 60.944 as Float, 6.472 as Float, 60.000 as Float]
		allTranslationYAnimation.keyTimes = [0.000 as Float, 0.250 as Float, 0.500 as Float, 0.750 as Float, 1.000 as Float]
		allTranslationYAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming]
		allTranslationYAnimation.repeatCount = HUGE
		allTranslationYAnimation.beginTime = beginTime
		allTranslationYAnimation.fillMode = fillMode
		allTranslationYAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["all"]?.layer.addAnimation(allTranslationYAnimation, forKey:"walk bouncy_TranslationY")

		let legBackRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		legBackRotationAnimation.duration = 1.000
		legBackRotationAnimation.values = [0.919 as Float, -0.954 as Float, -0.833 as Float, 0.919 as Float]
		legBackRotationAnimation.keyTimes = [0.000 as Float, 0.375 as Float, 0.500 as Float, 1.000 as Float]
		legBackRotationAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming]
		legBackRotationAnimation.repeatCount = HUGE
		legBackRotationAnimation.beginTime = beginTime
		legBackRotationAnimation.fillMode = fillMode
		legBackRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["leg back"]?.layer.addAnimation(legBackRotationAnimation, forKey:"walk bouncy_Rotation")

		let forearmFrontRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		forearmFrontRotationAnimation.duration = 1.000
		forearmFrontRotationAnimation.values = [0.000 as Float, -0.464 as Float, -0.293 as Float, 0.472 as Float, 0.050 as Float]
		forearmFrontRotationAnimation.keyTimes = [0.000 as Float, 0.250 as Float, 0.500 as Float, 0.750 as Float, 1.000 as Float]
		forearmFrontRotationAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming]
		forearmFrontRotationAnimation.repeatCount = HUGE
		forearmFrontRotationAnimation.beginTime = beginTime
		forearmFrontRotationAnimation.fillMode = fillMode
		forearmFrontRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["forearm front"]?.layer.addAnimation(forearmFrontRotationAnimation, forKey:"walk bouncy_Rotation")

		let shinBackRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		shinBackRotationAnimation.duration = 1.000
		shinBackRotationAnimation.values = [0.000 as Float, 1.635 as Float, 0.054 as Float, 0.319 as Float, 0.055 as Float, 0.050 as Float]
		shinBackRotationAnimation.keyTimes = [0.000 as Float, 0.250 as Float, 0.500 as Float, 0.625 as Float, 0.750 as Float, 1.000 as Float]
		shinBackRotationAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming, linearTiming]
		shinBackRotationAnimation.repeatCount = HUGE
		shinBackRotationAnimation.beginTime = beginTime
		shinBackRotationAnimation.fillMode = fillMode
		shinBackRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["shin back"]?.layer.addAnimation(shinBackRotationAnimation, forKey:"walk bouncy_Rotation")

		let shinFrontRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		shinFrontRotationAnimation.duration = 1.000
		shinFrontRotationAnimation.values = [0.005 as Float, 0.391 as Float, 0.046 as Float, 1.099 as Float, 0.050 as Float]
		shinFrontRotationAnimation.keyTimes = [0.000 as Float, 0.125 as Float, 0.250 as Float, 0.750 as Float, 1.000 as Float]
		shinFrontRotationAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming]
		shinFrontRotationAnimation.repeatCount = HUGE
		shinFrontRotationAnimation.beginTime = beginTime
		shinFrontRotationAnimation.fillMode = fillMode
		shinFrontRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["shin front"]?.layer.addAnimation(shinFrontRotationAnimation, forKey:"walk bouncy_Rotation")

		let forearmBackRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		forearmBackRotationAnimation.duration = 1.000
		forearmBackRotationAnimation.values = [0.000 as Float, 0.399 as Float, 0.056 as Float, -0.471 as Float, 0.050 as Float]
		forearmBackRotationAnimation.keyTimes = [0.000 as Float, 0.250 as Float, 0.500 as Float, 0.750 as Float, 1.000 as Float]
		forearmBackRotationAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming]
		forearmBackRotationAnimation.repeatCount = HUGE
		forearmBackRotationAnimation.beginTime = beginTime
		forearmBackRotationAnimation.fillMode = fillMode
		forearmBackRotationAnimation.removedOnCompletion = removedOnCompletion
		self.viewsByName["forearm back"]?.layer.addAnimation(forearmBackRotationAnimation, forKey:"walk bouncy_Rotation")
	}

	func removeWalkBouncyAnimation() {
		self.viewsByName["leg front"]?.layer.removeAnimationForKey("walk bouncy_Rotation")
		self.viewsByName["arm front"]?.layer.removeAnimationForKey("walk bouncy_Rotation")
		self.viewsByName["arm back"]?.layer.removeAnimationForKey("walk bouncy_Rotation")
		self.viewsByName["stickman"]?.layer.removeAnimationForKey("walk bouncy_ScaleX")
		self.viewsByName["stickman"]?.layer.removeAnimationForKey("walk bouncy_ScaleY")
		self.viewsByName["stickman"]?.layer.removeAnimationForKey("walk bouncy_TranslationX")
		self.viewsByName["stickman"]?.layer.removeAnimationForKey("walk bouncy_TranslationY")
		self.viewsByName["upper body"]?.layer.removeAnimationForKey("walk bouncy_Rotation")
		self.viewsByName["all"]?.layer.removeAnimationForKey("walk bouncy_TranslationX")
		self.viewsByName["all"]?.layer.removeAnimationForKey("walk bouncy_TranslationY")
		self.viewsByName["leg back"]?.layer.removeAnimationForKey("walk bouncy_Rotation")
		self.viewsByName["forearm front"]?.layer.removeAnimationForKey("walk bouncy_Rotation")
		self.viewsByName["shin back"]?.layer.removeAnimationForKey("walk bouncy_Rotation")
		self.viewsByName["shin front"]?.layer.removeAnimationForKey("walk bouncy_Rotation")
		self.viewsByName["forearm back"]?.layer.removeAnimationForKey("walk bouncy_Rotation")
	}

	override func animationDidStop(anim: CAAnimation!, finished flag: Bool) {
		if let completion = self.animationCompletions[anim] {
			self.animationCompletions.removeValueForKey(anim)
			completion(flag)
		}
	}

	func removeAllAnimations() {
		for subview in viewsByName.values {
			subview.layer.removeAllAnimations()
		}
		self.layer.removeAnimationForKey("Jump")
	}
}